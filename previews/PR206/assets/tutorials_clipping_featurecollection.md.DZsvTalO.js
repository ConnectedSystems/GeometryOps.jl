import{_ as a,c as i,a5 as n,o as e}from"./chunks/framework.BTiM8YUm.js";const g=JSON.parse('{"title":"Clipping a FeatureCollection by a polygon","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/clipping_featurecollection.md","filePath":"tutorials/clipping_featurecollection.md","lastUpdated":null}'),p={name:"tutorials/clipping_featurecollection.md"};function l(t,s,o,h,c,r){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="Clipping-a-FeatureCollection-by-a-polygon" tabindex="-1">Clipping a FeatureCollection by a polygon <a class="header-anchor" href="#Clipping-a-FeatureCollection-by-a-polygon" aria-label="Permalink to &quot;Clipping a FeatureCollection by a polygon {#Clipping-a-FeatureCollection-by-a-polygon}&quot;">â€‹</a></h1><p>Often, one might want to clip a feature collection (maybe from Shapefile or GeoJSON)</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> clip_or_empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(polygon, clipper)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #=</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    result = GO.intersection(polygon, clipper; target = GI.PolygonTrait())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    if isempty(result)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        null_point = GI.is3d(polygon) ? (GI.ismeasured(polygon) ? (NaN, NaN, NaN, NaN) : (NaN, NaN, NaN)) : (NaN, NaN)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        contents = GI.LinearRing.([[null_point, null_point, null_point]])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        return GI.Polygon{GI.is3d(polygon),GI.ismeasured(polygon),typeof(contents),Nothing, typeof(GI.crs(polygon))}(contents, nothing, GI.crs(polygon))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    else</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        return GI.MultiPolygon(result; crs = GI.crs(polygon))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    =#</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">intersection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GEOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), polygon, clipper)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>clip_or_empty (generic function with 1 method)</span></span></code></pre></div><p>First, let&#39;s load our data:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # DataFrame(Shapefile.Table(...))</span></span></code></pre></div><p>and plot it:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>f, a, p = poly(df.geometry)</span></span></code></pre></div><p>Now, we can define some polygon in that space, that we want to use to clip all geometries by!</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>clipping_poly = GI.Polygon([[(880_000, 990_000), (910_000, 990_000), (910_000, 1030_000), (880_000, 1030_000), (880_000, 990_000)]])</span></span>
<span class="line"><span>poly!(a, clipping_poly; color = Makie.Cycled(2))</span></span>
<span class="line"><span>f</span></span></code></pre></div><p>Finally, we clip, and show the output:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>clipped_geoms = clip_or_empty.(df.geometry, (clipping_poly,))</span></span></code></pre></div><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>poly!(a, clipped_geoms; color = Makie.Cycled(3), strokewidth = 0.75, strokecolor = :forestgreen)</span></span>
<span class="line"><span>f</span></span></code></pre></div>`,13)]))}const k=a(p,[["render",l]]);export{g as __pageData,k as default};
