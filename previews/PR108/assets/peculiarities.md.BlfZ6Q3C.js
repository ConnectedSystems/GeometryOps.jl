import{_ as e,c as a,o as t,a7 as o}from"./chunks/framework.D1m4sIXs.js";const _=JSON.parse('{"title":"Peculiarities","description":"","frontmatter":{},"headers":[],"relativePath":"peculiarities.md","filePath":"peculiarities.md","lastUpdated":null}'),i={name:"peculiarities.md"},r=o('<h1 id="Peculiarities" tabindex="-1">Peculiarities <a class="header-anchor" href="#Peculiarities" aria-label="Permalink to &quot;Peculiarities {#Peculiarities}&quot;">​</a></h1><h2 id="_True-and-_False-(or-BoolsAsTypes)" tabindex="-1"><code>_True</code> and <code>_False</code> (or <code>BoolsAsTypes</code>) <a class="header-anchor" href="#_True-and-_False-(or-BoolsAsTypes)" aria-label="Permalink to &quot;`_True` and `_False` (or `BoolsAsTypes`) {#_True-and-_False-(or-BoolsAsTypes)}&quot;">​</a></h2><p>When dispatch can be controlled by the value of a boolean variable, this introduces type instability. Instead of introducing type instability, we chose to encode our boolean decision variables, like <code>threaded</code> and <code>calc_extent</code> in <code>apply</code>, as types. This allows the compiler to reason about what will happen, and call the correct compiled method, in a stable way without worrying about</p><h2 id="What-does-apply-return-and-why?" tabindex="-1">What does <code>apply</code> return and why? <a class="header-anchor" href="#What-does-apply-return-and-why?" aria-label="Permalink to &quot;What does `apply` return and why? {#What-does-apply-return-and-why?}&quot;">​</a></h2><p>@rafaqz</p><h2 id="Why-do-you-want-me-to-provide-a-target-in-set-operations?" tabindex="-1">Why do you want me to provide a <code>target</code> in set operations? <a class="header-anchor" href="#Why-do-you-want-me-to-provide-a-target-in-set-operations?" aria-label="Permalink to &quot;Why do you want me to provide a `target` in set operations? {#Why-do-you-want-me-to-provide-a-target-in-set-operations?}&quot;">​</a></h2><p>@skygering</p><p>Mainly type stability reasons.</p>',8),s=[r];function n(d,l,c,p,h,u){return t(),a("div",null,s)}const m=e(i,[["render",n]]);export{_ as __pageData,m as default};
