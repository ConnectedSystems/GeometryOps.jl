import{_ as s,c as a,o as i,a7 as n}from"./chunks/framework.Cg_z0m9p.js";const g=JSON.parse('{"title":"Convex hull","description":"","frontmatter":{},"headers":[],"relativePath":"source/methods/convex_hull.md","filePath":"source/methods/convex_hull.md","lastUpdated":null}'),e={name:"source/methods/convex_hull.md"},l=n(`<h1 id="Convex-hull" tabindex="-1">Convex hull <a class="header-anchor" href="#Convex-hull" aria-label="Permalink to &quot;Convex hull {#Convex-hull}&quot;">​</a></h1><p>The <em>convex hull</em> of a set of points is the smallest <strong>convex</strong> polygon that contains all the points.</p><p>GeometryOps.jl provides a number of methods for computing the convex hull of a set of points, usually linked to other Julia packages.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><h3 id="Simple-hull" tabindex="-1">Simple hull <a class="header-anchor" href="#Simple-hull" aria-label="Permalink to &quot;Simple hull {#Simple-hull}&quot;">​</a></h3><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import GeometryOps as GO, GeoInterface as GI</span></span>
<span class="line"><span>using CairoMakie # to plot</span></span>
<span class="line"><span></span></span>
<span class="line"><span>points = randn(GO.Point2f, 100)</span></span>
<span class="line"><span>f, a, p = plot(points; label = &quot;Points&quot;)</span></span>
<span class="line"><span>hull_poly = GO.convex_hull(points)</span></span>
<span class="line"><span>lines!(a, hull_poly; label = &quot;Convex hull&quot;, color = Makie.wong_colors()[2])</span></span>
<span class="line"><span>axislegend(a)</span></span>
<span class="line"><span>f</span></span></code></pre></div><h2 id="Convex-hull-of-the-USA" tabindex="-1">Convex hull of the USA <a class="header-anchor" href="#Convex-hull-of-the-USA" aria-label="Permalink to &quot;Convex hull of the USA {#Convex-hull-of-the-USA}&quot;">​</a></h2><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import GeometryOps as GO, GeoInterface as GI</span></span>
<span class="line"><span>using CairoMakie # to plot</span></span>
<span class="line"><span>using NaturalEarth # for data</span></span>
<span class="line"><span></span></span>
<span class="line"><span>all_adm0 = naturalearth(&quot;admin_0_countries&quot;, 110)</span></span>
<span class="line"><span>usa = all_adm0.geometry[findfirst(==(&quot;USA&quot;), all_adm0.ADM0_A3)]</span></span>
<span class="line"><span>f, a, p = lines(usa)</span></span>
<span class="line"><span>lines!(a, GO.convex_hull(usa); color = Makie.wong_colors()[2])</span></span>
<span class="line"><span>f</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    convex_hull([method], geometries)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Compute the convex hull of the points in \`geometries\`.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Returns a \`GI.Polygon\` representing the convex hull.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Note that all</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!!! warning</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    This interface only computes the 2-dimensional convex hull!</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    For higher dimensional hulls, use the relevant package (Qhull.jl or similar).</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> convex_hull </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    DelaunayTriangulationMethod()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">This is an algorithm for the \`convex_hull\` function.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Uses [\`DelaunayTriangulation.jl\`](https://github.com/JuliaGeometry/DelaunayTriangulation.jl) to compute the convex hull.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">This is a pure Julia algorithm which provides an optimal Delaunay triangulation.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">See also \`convex_hull\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DelaunayTriangulationMethod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>, <code>DelaunayTriangulationMethod</code>, <code>EarCutMethod</code>. GrahamScanMethod, etc. can be implemented in GO as well, if someone wants to...</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convex_hull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometries) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> convex_hull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DelaunayTriangulationMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), geometries)</span></span></code></pre></div><p>TODO: have this respect the CRS by pulling it out of <code>geometries</code>.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> convex_hull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DelaunayTriangulationMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, geometries)</span></span></code></pre></div><p>Extract all points as tuples. We have to collect and allocate here, because DelaunayTriangulation only accepts vectors of point-like geoms.</p><p>Cleanest would be to use the iterable from GO.flatten directly, but that would require us to implement the convex hull algorithm directly.</p><p>TODO: create a specialized method that extracts only the information required, GeometryBasics points can be passed through directly.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    points </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(tuples, GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PointTrait, geometries))</span></span></code></pre></div><p>Compute the convex hull using DelTri (shorthand for DelaunayTriangulation.jl).</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DelTri</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">convex_hull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(points)</span></span></code></pre></div><p>Convert the result to a <code>GI.Polygon</code> and return it. View would be more efficient here, but re-allocating is cleaner.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LinearRing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">points[ch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">indices])])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Other methods may include</p><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>`,24),t=[l];function p(h,o,r,k,c,d){return i(),a("div",null,t)}const y=s(e,[["render",p]]);export{g as __pageData,y as default};
