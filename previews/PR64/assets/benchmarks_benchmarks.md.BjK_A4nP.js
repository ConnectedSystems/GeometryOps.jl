import{_ as a,c as s,o as e,a7 as n}from"./chunks/framework.DQ7xOWOY.js";const _=JSON.parse('{"title":"Performance benchmarks","description":"","frontmatter":{},"headers":[],"relativePath":"benchmarks/benchmarks.md","filePath":"benchmarks/benchmarks.md","lastUpdated":null}'),p={name:"benchmarks/benchmarks.md"},i=n(`<h1 id="Performance-benchmarks" tabindex="-1">Performance benchmarks <a class="header-anchor" href="#Performance-benchmarks" aria-label="Permalink to &quot;Performance benchmarks {#Performance-benchmarks}&quot;">​</a></h1><p>We&#39;ll benchmark GeometryOps.jl against LibGEOS, which is what most common geometry operations packages (across languages) seem to depend on.</p><p>First, we&#39;ll load the desired packages:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>import GeoInterface as GI,</span></span>
<span class="line"><span>    GeometryBasics as GB,</span></span>
<span class="line"><span>    GeometryOps as GO,</span></span>
<span class="line"><span>    LibGEOS as LG</span></span>
<span class="line"><span>import GeoInterface, GeometryBasics, GeometryOps, LibGEOS</span></span>
<span class="line"><span>using BenchmarkTools, Statistics</span></span>
<span class="line"><span>using GeoJSON # to generate and manipulate geometry</span></span>
<span class="line"><span>using CairoMakie, MakieThemes, GeoInterfaceMakie # to visualize and understand what exactly we&#39;re doing</span></span>
<span class="line"><span>using DataInterpolations # to upscale and downscale geometry</span></span>
<span class="line"><span></span></span>
<span class="line"><span>GeoInterfaceMakie.@enable GeoJSON.AbstractGeometry</span></span>
<span class="line"><span>GeoInterfaceMakie.@enable LibGEOS.AbstractGeometry</span></span>
<span class="line"><span>GeoInterfaceMakie.@enable GeoInterface.Wrappers.WrapperGeometry</span></span></code></pre></div><p>We include some basic plotting utilities here!</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>include(joinpath(@__DIR__, &quot;utils.jl&quot;))</span></span></code></pre></div><p>We set up a benchmark suite in order to understand exactly what will happen:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>suite = BenchmarkGroup()</span></span></code></pre></div><p>In order to make this fair, we will each package&#39;s native representation as input to their benchmarks.</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lg_and_go</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometry) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (GI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LibGEOS, geometry), GO</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tuples</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometry))</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>lg_and_go (generic function with 1 method)</span></span></code></pre></div><h1 id="Polygon-benchmarks" tabindex="-1">Polygon benchmarks <a class="header-anchor" href="#Polygon-benchmarks" aria-label="Permalink to &quot;Polygon benchmarks {#Polygon-benchmarks}&quot;">​</a></h1><p>Let&#39;s look at the simple case of a circle.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>points = Point2f.((cos(θ) for θ in LinRange(0, 2π, 10000)), (sin(θ) for θ in LinRange(0, 2π, 10000)))</span></span></code></pre></div><p>We&#39;ll use this circle as a polygon for our benchmarks.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>circle = GI.Wrappers.Polygon([points, GB.decompose(Point2f, GB.Circle(Point2f(0.25, 0.25), 0.5))])</span></span>
<span class="line"><span>closed_circle = GO.ClosedRing()(GO.tuples(circle))</span></span>
<span class="line"><span>Makie.poly(circle; axis = (; aspect = DataAspect()))</span></span></code></pre></div><p>Now, we materialize our LibGEOS circles;</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>lg_circle, go_circle = lg_and_go(closed_circle)</span></span></code></pre></div><h2 id="Area" tabindex="-1">Area <a class="header-anchor" href="#Area" aria-label="Permalink to &quot;Area {#Area}&quot;">​</a></h2><p>Let&#39;s start with the area of the circle.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>circle_area_suite = BenchmarkGroup()</span></span></code></pre></div><p>We compute the area of the circle at different resolutions!</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>n_points_values = [10, 100, 1000, 10000, 100000]</span></span>
<span class="line"><span>for n_points in n_points_values</span></span>
<span class="line"><span>    circle = GI.Wrappers.Polygon([tuple.((cos(θ) for θ in LinRange(0, 2π, n_points)), (sin(θ) for θ in LinRange(0, 2π, n_points)))])</span></span>
<span class="line"><span>    closed_circle = GO.ClosedRing()(circle)</span></span>
<span class="line"><span>    lg_circle, go_circle = lg_and_go(closed_circle)</span></span>
<span class="line"><span>    circle_area_suite[&quot;GeometryOps&quot;][n_points] = @benchmarkable GO.area($go_circle)</span></span>
<span class="line"><span>    circle_area_suite[&quot;LibGEOS&quot;][n_points]     = @benchmarkable LG.area($lg_circle)</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BenchmarkTools.tune!(circle_area_suite)</span></span>
<span class="line"><span>circle_area_result = BenchmarkTools.run(circle_area_suite)</span></span></code></pre></div><p>We now have the benchmark results, and we can visualize them.</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>plot_results(circle_area_result, &quot;Area&quot;)</span></span></code></pre></div><h2 id="Difference,-intersection,-union" tabindex="-1">Difference, intersection, union <a class="header-anchor" href="#Difference,-intersection,-union" aria-label="Permalink to &quot;Difference, intersection, union {#Difference,-intersection,-union}&quot;">​</a></h2><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>circle_suite = BenchmarkGroup()</span></span>
<span class="line"><span>circle_difference_suite = circle_suite[&quot;difference&quot;]</span></span>
<span class="line"><span>circle_intersection_suite = circle_suite[&quot;intersection&quot;]</span></span>
<span class="line"><span>circle_union_suite = circle_suite[&quot;union&quot;]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>n_points_values = round.(Int, exp10.(LinRange(1, 4, 10)))</span></span>
<span class="line"><span>for n_points in n_points_values</span></span>
<span class="line"><span>    circle = GI.Wrappers.Polygon([tuple.((cos(θ) for θ in LinRange(0, 2π, n_points)), (sin(θ) for θ in LinRange(0, 2π, n_points)))])</span></span>
<span class="line"><span>    closed_circle = GO.ClosedRing()(circle)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    lg_circle_right, go_circle_right = lg_and_go(closed_circle)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    circle_left = GO.apply(GI.PointTrait, closed_circle) do point</span></span>
<span class="line"><span>        x, y = GI.x(point), GI.y(point)</span></span>
<span class="line"><span>        return (x+0.6, y)</span></span>
<span class="line"><span>    end</span></span>
<span class="line"><span>    lg_circle_left, go_circle_left = lg_and_go(circle_left)</span></span>
<span class="line"><span>    circle_difference_suite[&quot;GeometryOps&quot;][n_points] = @benchmarkable GO.difference($go_circle_left, $go_circle_right; target = GI.PolygonTrait)</span></span>
<span class="line"><span>    circle_difference_suite[&quot;LibGEOS&quot;][n_points]     = @benchmarkable LG.difference($lg_circle_left, $lg_circle_right)</span></span>
<span class="line"><span>    circle_intersection_suite[&quot;GeometryOps&quot;][n_points] = @benchmarkable GO.intersection($go_circle_left, $go_circle_right; target = GI.PolygonTrait)</span></span>
<span class="line"><span>    circle_intersection_suite[&quot;LibGEOS&quot;][n_points]     = @benchmarkable LG.intersection($lg_circle_left, $lg_circle_right)</span></span>
<span class="line"><span>    circle_union_suite[&quot;GeometryOps&quot;][n_points] = @benchmarkable GO.union($go_circle_left, $go_circle_right; target = GI.PolygonTrait)</span></span>
<span class="line"><span>    circle_union_suite[&quot;LibGEOS&quot;][n_points]     = @benchmarkable LG.union($lg_circle_left, $lg_circle_right)</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span></span></span>
<span class="line"><span>BenchmarkTools.tune!(circle_suite)</span></span>
<span class="line"><span>@time circle_result = BenchmarkTools.run(circle_suite; seconds = 3)</span></span></code></pre></div><p>Now, we plot!</p><h3 id="Difference" tabindex="-1">Difference <a class="header-anchor" href="#Difference" aria-label="Permalink to &quot;Difference {#Difference}&quot;">​</a></h3><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>plot_trials(circle_result[&quot;difference&quot;], &quot;Difference&quot;)</span></span></code></pre></div><h3 id="Intersection" tabindex="-1">Intersection <a class="header-anchor" href="#Intersection" aria-label="Permalink to &quot;Intersection {#Intersection}&quot;">​</a></h3><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>plot_trials(circle_result[&quot;intersection&quot;], &quot;Intersection&quot;)</span></span></code></pre></div><h3 id="Union" tabindex="-1">Union <a class="header-anchor" href="#Union" aria-label="Permalink to &quot;Union {#Union}&quot;">​</a></h3><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>plot_trials(circle_result[&quot;union&quot;], &quot;Union&quot;)</span></span></code></pre></div><h2 id="Good-old-USA" tabindex="-1">Good old USA <a class="header-anchor" href="#Good-old-USA" aria-label="Permalink to &quot;Good old USA {#Good-old-USA}&quot;">​</a></h2><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>fc = GeoJSON.read(read(download(&quot;https://rawcdn.githack.com/nvkelso/natural-earth-vector/ca96624a56bd078437bca8184e78163e5039ad19/geojson/ne_10m_admin_0_countries.geojson&quot;)))</span></span>
<span class="line"><span>usa_multipoly = fc.geometry[findfirst(==(&quot;United States of America&quot;), fc.NAME)]</span></span>
<span class="line"><span>areas = [GO.area(p) for p in GI.getgeom(usa_multipoly)]</span></span>
<span class="line"><span>usa_poly = GI.getgeom(usa_multipoly, findmax(areas)[2])</span></span>
<span class="line"><span>center_of_the_world = GO.centroid(usa_poly)</span></span>
<span class="line"><span>usa_poly_reflected = GO.apply(GI.PointTrait, usa_poly) do point</span></span>
<span class="line"><span>    x, y = GI.x(point), GI.y(point)</span></span>
<span class="line"><span>    return (-(x - GI.x(center_of_the_world)) + GI.x(center_of_the_world), y)</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span></span></span>
<span class="line"><span>f, a, p = poly(usa_poly; color = Makie.wong_colors(0.5)[1], label = &quot;Straight&quot;, axis = (; title = &quot;Good old U.S.A.&quot;, aspect = DataAspect()))</span></span>
<span class="line"><span>poly!(usa_poly_reflected; color = Makie.wong_colors(0.5)[2], label = &quot;Reversed&quot;)</span></span>
<span class="line"><span>Legend(f[2, 1], a; valign = 0, orientation = :horizontal)</span></span>
<span class="line"><span>f</span></span>
<span class="line"><span></span></span>
<span class="line"><span>usa_o_lg, usa_o_go = lg_and_go(usa_poly)</span></span>
<span class="line"><span>usa_r_lg, usa_r_go = lg_and_go(usa_poly_reflected)</span></span></code></pre></div><p>First, we&#39;ll test union:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>printstyled(&quot;LibGEOS&quot;; color = :red, bold = true)</span></span>
<span class="line"><span>println()</span></span>
<span class="line"><span>@benchmark LG.union($usa_o_lg, $usa_r_lg)</span></span>
<span class="line"><span>printstyled(&quot;GeometryOps&quot;; color = :blue, bold = true)</span></span>
<span class="line"><span>println()</span></span>
<span class="line"><span>@benchmark GO.union($usa_o_go, $usa_r_go; target = GI.PolygonTrait)</span></span></code></pre></div><p>Next, intersection:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>printstyled(&quot;LibGEOS&quot;; color = :red, bold = true)</span></span>
<span class="line"><span>println()</span></span>
<span class="line"><span>@benchmark LG.intersection($usa_o_lg, $usa_r_lg)</span></span>
<span class="line"><span>printstyled(&quot;GeometryOps&quot;; color = :blue, bold = true)</span></span>
<span class="line"><span>println()</span></span>
<span class="line"><span>@benchmark GO.intersection($usa_o_go, $usa_r_go; target = GI.PolygonTrait)</span></span></code></pre></div><p>and finally the difference:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>printstyled(&quot;LibGEOS&quot;; color = :red, bold = true)</span></span>
<span class="line"><span>println()</span></span>
<span class="line"><span>lg_diff = LG.difference(usa_o_lg, usa_r_lg)</span></span>
<span class="line"><span>printstyled(&quot;GeometryOps&quot;; color = :blue, bold = true)</span></span>
<span class="line"><span>println()</span></span>
<span class="line"><span>go_diff = GO.difference(usa_o_go, usa_r_go; target = GI.PolygonTrait)</span></span></code></pre></div><p>You can see clearly that GeometryOps is currently losing out to LibGEOS. Our algorithms aren&#39;t optimized for large polygons and we&#39;re paying the price for that.</p><p>It&#39;s heartening that the polygon complexity isn&#39;t making too much of a difference; the difference in performance is mostly due to the number of vertices, as we can see from the circle benchmarks as well.</p><hr><p><em>This page was generated using <a href="https://github.com/fredrikekre/Literate.jl" target="_blank" rel="noreferrer">Literate.jl</a>.</em></p>`,46),l=[i];function t(o,c,r,d,u,h){return e(),s("div",null,l)}const m=a(p,[["render",t]]);export{_ as __pageData,m as default};
